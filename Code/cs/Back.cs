// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/back.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from proto/back.proto</summary>
public static partial class BackReflection {

  #region Descriptor
  /// <summary>File descriptor for proto/back.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BackReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChBwcm90by9iYWNrLnByb3RvIigKFVJlcUNsb3NlU2VydmVyTWVzc2FnZRIP",
          "Cgdjb21tYW5kGAEgASgJIiUKFVJlc0Nsb3NlU2VydmVyTWVzc2FnZRIMCgRp",
          "bmZvGAEgASgJQi4KIWluZm8ueGlhb21vLnNlcnZlci5wcm90b2NvbC5wcm90",
          "b0IJQmFja1Byb3RvYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ReqCloseServerMessage), global::ReqCloseServerMessage.Parser, new[]{ "Command" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResCloseServerMessage), global::ResCloseServerMessage.Parser, new[]{ "Info" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ReqCloseServerMessage : pb::IMessage<ReqCloseServerMessage> {
  private static readonly pb::MessageParser<ReqCloseServerMessage> _parser = new pb::MessageParser<ReqCloseServerMessage>(() => new ReqCloseServerMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReqCloseServerMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BackReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqCloseServerMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqCloseServerMessage(ReqCloseServerMessage other) : this() {
    command_ = other.command_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReqCloseServerMessage Clone() {
    return new ReqCloseServerMessage(this);
  }

  /// <summary>Field number for the "command" field.</summary>
  public const int CommandFieldNumber = 1;
  private string command_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Command {
    get { return command_; }
    set {
      command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReqCloseServerMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReqCloseServerMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Command != other.Command) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Command.Length != 0) hash ^= Command.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Command.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Command);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Command.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReqCloseServerMessage other) {
    if (other == null) {
      return;
    }
    if (other.Command.Length != 0) {
      Command = other.Command;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Command = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ResCloseServerMessage : pb::IMessage<ResCloseServerMessage> {
  private static readonly pb::MessageParser<ResCloseServerMessage> _parser = new pb::MessageParser<ResCloseServerMessage>(() => new ResCloseServerMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ResCloseServerMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BackReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResCloseServerMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResCloseServerMessage(ResCloseServerMessage other) : this() {
    info_ = other.info_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResCloseServerMessage Clone() {
    return new ResCloseServerMessage(this);
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 1;
  private string info_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Info {
    get { return info_; }
    set {
      info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ResCloseServerMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ResCloseServerMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Info != other.Info) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Info.Length != 0) hash ^= Info.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Info.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Info);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Info.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ResCloseServerMessage other) {
    if (other == null) {
      return;
    }
    if (other.Info.Length != 0) {
      Info = other.Info;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Info = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
