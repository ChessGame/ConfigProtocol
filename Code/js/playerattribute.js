// source: user.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.user.PlayerAttribute');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.PlayerAttribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.PlayerAttribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.PlayerAttribute.displayName = 'proto.user.PlayerAttribute';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.user.PlayerAttribute.prototype.toObject = function(opt_includeInstance) {
  return proto.user.PlayerAttribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.user.PlayerAttribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.PlayerAttribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    phyattmax: jspb.Message.getFieldWithDefault(msg, 1, 0),
    phyattmin: jspb.Message.getFieldWithDefault(msg, 2, 0),
    magicattmax: jspb.Message.getFieldWithDefault(msg, 3, 0),
    magicattmin: jspb.Message.getFieldWithDefault(msg, 4, 0),
    taoattmax: jspb.Message.getFieldWithDefault(msg, 5, 0),
    taoattmin: jspb.Message.getFieldWithDefault(msg, 6, 0),
    phydefmax: jspb.Message.getFieldWithDefault(msg, 7, 0),
    phydefmin: jspb.Message.getFieldWithDefault(msg, 8, 0),
    magicdefmax: jspb.Message.getFieldWithDefault(msg, 9, 0),
    magicdefmin: jspb.Message.getFieldWithDefault(msg, 10, 0),
    accurate: jspb.Message.getFieldWithDefault(msg, 11, 0),
    dodge: jspb.Message.getFieldWithDefault(msg, 12, 0),
    poisonrecover: jspb.Message.getFieldWithDefault(msg, 13, 0),
    heathrecover: jspb.Message.getFieldWithDefault(msg, 14, 0),
    attackspeed: jspb.Message.getFieldWithDefault(msg, 15, 0),
    maxhp: jspb.Message.getFieldWithDefault(msg, 16, 0),
    maxmp: jspb.Message.getFieldWithDefault(msg, 17, 0),
    magicrecover: jspb.Message.getFieldWithDefault(msg, 18, 0),
    luck: jspb.Message.getFieldWithDefault(msg, 19, 0),
    critical: jspb.Message.getFieldWithDefault(msg, 20, 0),
    nbvalue: jspb.Message.getFieldWithDefault(msg, 21, 0),
    criticaldamage: jspb.Message.getFieldWithDefault(msg, 22, 0),
    maxinnerpower: jspb.Message.getFieldWithDefault(msg, 23, 0),
    resistance: jspb.Message.getFieldWithDefault(msg, 24, 0),
    holyatt: jspb.Message.getFieldWithDefault(msg, 25, 0),
    pkatk: jspb.Message.getFieldWithDefault(msg, 26, 0),
    pkdef: jspb.Message.getFieldWithDefault(msg, 27, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.PlayerAttribute}
 */
proto.user.PlayerAttribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.PlayerAttribute;
  return proto.user.PlayerAttribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.PlayerAttribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.PlayerAttribute}
 */
proto.user.PlayerAttribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhyattmax(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhyattmin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMagicattmax(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMagicattmin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaoattmax(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaoattmin(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhydefmax(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhydefmin(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMagicdefmax(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMagicdefmin(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccurate(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDodge(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPoisonrecover(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeathrecover(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackspeed(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxhp(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxmp(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMagicrecover(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLuck(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCritical(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNbvalue(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCriticaldamage(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxinnerpower(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResistance(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHolyatt(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPkatk(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPkdef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.PlayerAttribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.user.PlayerAttribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.PlayerAttribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.PlayerAttribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhyattmax();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPhyattmin();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMagicattmax();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMagicattmin();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTaoattmax();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTaoattmin();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPhydefmax();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPhydefmin();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMagicdefmax();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMagicdefmin();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getAccurate();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getDodge();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getPoisonrecover();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getHeathrecover();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getAttackspeed();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getMaxhp();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getMaxmp();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getMagicrecover();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getLuck();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getCritical();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getNbvalue();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getCriticaldamage();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getMaxinnerpower();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getResistance();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getHolyatt();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = message.getPkatk();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getPkdef();
  if (f !== 0) {
    writer.writeInt32(
      27,
      f
    );
  }
};


/**
 * optional int32 phyAttMax = 1;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getPhyattmax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setPhyattmax = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 phyAttMin = 2;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getPhyattmin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setPhyattmin = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 magicAttMax = 3;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getMagicattmax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setMagicattmax = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 magicAttMin = 4;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getMagicattmin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setMagicattmin = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 taoAttMax = 5;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getTaoattmax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setTaoattmax = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 taoAttMin = 6;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getTaoattmin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setTaoattmin = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 phyDefMax = 7;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getPhydefmax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setPhydefmax = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 phyDefMin = 8;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getPhydefmin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setPhydefmin = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 magicDefMax = 9;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getMagicdefmax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setMagicdefmax = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 magicDefMin = 10;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getMagicdefmin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setMagicdefmin = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 accurate = 11;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getAccurate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setAccurate = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 dodge = 12;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getDodge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setDodge = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 poisonRecover = 13;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getPoisonrecover = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setPoisonrecover = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 heathRecover = 14;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getHeathrecover = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setHeathrecover = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 attackSpeed = 15;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getAttackspeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setAttackspeed = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 maxHp = 16;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getMaxhp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setMaxhp = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 maxMp = 17;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getMaxmp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setMaxmp = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 magicRecover = 18;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getMagicrecover = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setMagicrecover = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 luck = 19;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getLuck = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setLuck = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 critical = 20;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getCritical = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setCritical = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 nbValue = 21;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getNbvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setNbvalue = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 criticalDamage = 22;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getCriticaldamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setCriticaldamage = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 maxInnerPower = 23;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getMaxinnerpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setMaxinnerpower = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int32 resistance = 24;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getResistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setResistance = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional int32 holyAtt = 25;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getHolyatt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setHolyatt = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional int32 pkAtk = 26;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getPkatk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setPkatk = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional int32 pkDef = 27;
 * @return {number}
 */
proto.user.PlayerAttribute.prototype.getPkdef = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {number} value
 * @return {!proto.user.PlayerAttribute} returns this
 */
proto.user.PlayerAttribute.prototype.setPkdef = function(value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};


