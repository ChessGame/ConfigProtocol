// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
namespace user {
class BindPhoneNumberRequest;
class BindPhoneNumberRequestDefaultTypeInternal;
extern BindPhoneNumberRequestDefaultTypeInternal _BindPhoneNumberRequest_default_instance_;
class CloseServerResponse;
class CloseServerResponseDefaultTypeInternal;
extern CloseServerResponseDefaultTypeInternal _CloseServerResponse_default_instance_;
class CreateRoleRequest;
class CreateRoleRequestDefaultTypeInternal;
extern CreateRoleRequestDefaultTypeInternal _CreateRoleRequest_default_instance_;
class DisconnectResponse;
class DisconnectResponseDefaultTypeInternal;
extern DisconnectResponseDefaultTypeInternal _DisconnectResponse_default_instance_;
class GMCommand;
class GMCommandDefaultTypeInternal;
extern GMCommandDefaultTypeInternal _GMCommand_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class PlayerAttribute;
class PlayerAttributeDefaultTypeInternal;
extern PlayerAttributeDefaultTypeInternal _PlayerAttribute_default_instance_;
class RandomRoleNameRequest;
class RandomRoleNameRequestDefaultTypeInternal;
extern RandomRoleNameRequestDefaultTypeInternal _RandomRoleNameRequest_default_instance_;
class RandomRoleNameResponse;
class RandomRoleNameResponseDefaultTypeInternal;
extern RandomRoleNameResponseDefaultTypeInternal _RandomRoleNameResponse_default_instance_;
class RechargeRequest;
class RechargeRequestDefaultTypeInternal;
extern RechargeRequestDefaultTypeInternal _RechargeRequest_default_instance_;
class ReconnectRequest;
class ReconnectRequestDefaultTypeInternal;
extern ReconnectRequestDefaultTypeInternal _ReconnectRequest_default_instance_;
class RoleIdMsg;
class RoleIdMsgDefaultTypeInternal;
extern RoleIdMsgDefaultTypeInternal _RoleIdMsg_default_instance_;
class RoleInfo;
class RoleInfoDefaultTypeInternal;
extern RoleInfoDefaultTypeInternal _RoleInfo_default_instance_;
class UserFeedbackRequest;
class UserFeedbackRequestDefaultTypeInternal;
extern UserFeedbackRequestDefaultTypeInternal _UserFeedbackRequest_default_instance_;
}  // namespace user
PROTOBUF_NAMESPACE_OPEN
template<> ::user::BindPhoneNumberRequest* Arena::CreateMaybeMessage<::user::BindPhoneNumberRequest>(Arena*);
template<> ::user::CloseServerResponse* Arena::CreateMaybeMessage<::user::CloseServerResponse>(Arena*);
template<> ::user::CreateRoleRequest* Arena::CreateMaybeMessage<::user::CreateRoleRequest>(Arena*);
template<> ::user::DisconnectResponse* Arena::CreateMaybeMessage<::user::DisconnectResponse>(Arena*);
template<> ::user::GMCommand* Arena::CreateMaybeMessage<::user::GMCommand>(Arena*);
template<> ::user::LoginRequest* Arena::CreateMaybeMessage<::user::LoginRequest>(Arena*);
template<> ::user::LoginResponse* Arena::CreateMaybeMessage<::user::LoginResponse>(Arena*);
template<> ::user::PlayerAttribute* Arena::CreateMaybeMessage<::user::PlayerAttribute>(Arena*);
template<> ::user::RandomRoleNameRequest* Arena::CreateMaybeMessage<::user::RandomRoleNameRequest>(Arena*);
template<> ::user::RandomRoleNameResponse* Arena::CreateMaybeMessage<::user::RandomRoleNameResponse>(Arena*);
template<> ::user::RechargeRequest* Arena::CreateMaybeMessage<::user::RechargeRequest>(Arena*);
template<> ::user::ReconnectRequest* Arena::CreateMaybeMessage<::user::ReconnectRequest>(Arena*);
template<> ::user::RoleIdMsg* Arena::CreateMaybeMessage<::user::RoleIdMsg>(Arena*);
template<> ::user::RoleInfo* Arena::CreateMaybeMessage<::user::RoleInfo>(Arena*);
template<> ::user::UserFeedbackRequest* Arena::CreateMaybeMessage<::user::UserFeedbackRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace user {

enum GoingDownReason : int {
  Maintain = 0,
  Block = 1,
  AnotherSession = 2,
  GoingDownReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GoingDownReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GoingDownReason_IsValid(int value);
constexpr GoingDownReason GoingDownReason_MIN = Maintain;
constexpr GoingDownReason GoingDownReason_MAX = AnotherSession;
constexpr int GoingDownReason_ARRAYSIZE = GoingDownReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GoingDownReason_descriptor();
template<typename T>
inline const std::string& GoingDownReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GoingDownReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GoingDownReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GoingDownReason_descriptor(), enum_t_value);
}
inline bool GoingDownReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GoingDownReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GoingDownReason>(
    GoingDownReason_descriptor(), name, value);
}
// ===================================================================

class RoleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.RoleInfo) */ {
 public:
  inline RoleInfo() : RoleInfo(nullptr) {}
  virtual ~RoleInfo();

  RoleInfo(const RoleInfo& from);
  RoleInfo(RoleInfo&& from) noexcept
    : RoleInfo() {
    *this = ::std::move(from);
  }

  inline RoleInfo& operator=(const RoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleInfo& operator=(RoleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleInfo* internal_default_instance() {
    return reinterpret_cast<const RoleInfo*>(
               &_RoleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoleInfo& a, RoleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleInfo* New() const final {
    return CreateMaybeMessage<RoleInfo>(nullptr);
  }

  RoleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleInfo& from);
  void MergeFrom(const RoleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.RoleInfo";
  }
  protected:
  explicit RoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 2,
    kRoleIdFieldNumber = 1,
    kLevelFieldNumber = 3,
    kSexFieldNumber = 4,
    kMapIdFieldNumber = 5,
    kLineFieldNumber = 6,
    kCurServerTypeFieldNumber = 7,
  };
  // string roleName = 2;
  void clear_rolename();
  const std::string& rolename() const;
  void set_rolename(const std::string& value);
  void set_rolename(std::string&& value);
  void set_rolename(const char* value);
  void set_rolename(const char* value, size_t size);
  std::string* mutable_rolename();
  std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);
  private:
  const std::string& _internal_rolename() const;
  void _internal_set_rolename(const std::string& value);
  std::string* _internal_mutable_rolename();
  public:

  // int64 roleId = 1;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sex = 4;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mapId = 5;
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::int32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 line = 6;
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curServerType = 7;
  void clear_curservertype();
  ::PROTOBUF_NAMESPACE_ID::int32 curservertype() const;
  void set_curservertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curservertype() const;
  void _internal_set_curservertype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.RoleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 mapid_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  ::PROTOBUF_NAMESPACE_ID::int32 curservertype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PlayerAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.PlayerAttribute) */ {
 public:
  inline PlayerAttribute() : PlayerAttribute(nullptr) {}
  virtual ~PlayerAttribute();

  PlayerAttribute(const PlayerAttribute& from);
  PlayerAttribute(PlayerAttribute&& from) noexcept
    : PlayerAttribute() {
    *this = ::std::move(from);
  }

  inline PlayerAttribute& operator=(const PlayerAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAttribute& operator=(PlayerAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerAttribute* internal_default_instance() {
    return reinterpret_cast<const PlayerAttribute*>(
               &_PlayerAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerAttribute& a, PlayerAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerAttribute* New() const final {
    return CreateMaybeMessage<PlayerAttribute>(nullptr);
  }

  PlayerAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerAttribute& from);
  void MergeFrom(const PlayerAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.PlayerAttribute";
  }
  protected:
  explicit PlayerAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhyAttMaxFieldNumber = 1,
    kPhyAttMinFieldNumber = 2,
    kMagicAttMaxFieldNumber = 3,
    kMagicAttMinFieldNumber = 4,
    kTaoAttMaxFieldNumber = 5,
    kTaoAttMinFieldNumber = 6,
    kPhyDefMaxFieldNumber = 7,
    kPhyDefMinFieldNumber = 8,
    kMagicDefMaxFieldNumber = 9,
    kMagicDefMinFieldNumber = 10,
    kAccurateFieldNumber = 11,
    kDodgeFieldNumber = 12,
    kPoisonRecoverFieldNumber = 13,
    kHeathRecoverFieldNumber = 14,
    kAttackSpeedFieldNumber = 15,
    kMaxHpFieldNumber = 16,
    kMaxMpFieldNumber = 17,
    kMagicRecoverFieldNumber = 18,
    kLuckFieldNumber = 19,
    kCriticalFieldNumber = 20,
    kNbValueFieldNumber = 21,
    kCriticalDamageFieldNumber = 22,
    kMaxInnerPowerFieldNumber = 23,
    kResistanceFieldNumber = 24,
    kHolyAttFieldNumber = 25,
    kPkAtkFieldNumber = 26,
    kPkDefFieldNumber = 27,
  };
  // int32 phyAttMax = 1;
  void clear_phyattmax();
  ::PROTOBUF_NAMESPACE_ID::int32 phyattmax() const;
  void set_phyattmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phyattmax() const;
  void _internal_set_phyattmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 phyAttMin = 2;
  void clear_phyattmin();
  ::PROTOBUF_NAMESPACE_ID::int32 phyattmin() const;
  void set_phyattmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phyattmin() const;
  void _internal_set_phyattmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 magicAttMax = 3;
  void clear_magicattmax();
  ::PROTOBUF_NAMESPACE_ID::int32 magicattmax() const;
  void set_magicattmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_magicattmax() const;
  void _internal_set_magicattmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 magicAttMin = 4;
  void clear_magicattmin();
  ::PROTOBUF_NAMESPACE_ID::int32 magicattmin() const;
  void set_magicattmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_magicattmin() const;
  void _internal_set_magicattmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 taoAttMax = 5;
  void clear_taoattmax();
  ::PROTOBUF_NAMESPACE_ID::int32 taoattmax() const;
  void set_taoattmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taoattmax() const;
  void _internal_set_taoattmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 taoAttMin = 6;
  void clear_taoattmin();
  ::PROTOBUF_NAMESPACE_ID::int32 taoattmin() const;
  void set_taoattmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taoattmin() const;
  void _internal_set_taoattmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 phyDefMax = 7;
  void clear_phydefmax();
  ::PROTOBUF_NAMESPACE_ID::int32 phydefmax() const;
  void set_phydefmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phydefmax() const;
  void _internal_set_phydefmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 phyDefMin = 8;
  void clear_phydefmin();
  ::PROTOBUF_NAMESPACE_ID::int32 phydefmin() const;
  void set_phydefmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_phydefmin() const;
  void _internal_set_phydefmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 magicDefMax = 9;
  void clear_magicdefmax();
  ::PROTOBUF_NAMESPACE_ID::int32 magicdefmax() const;
  void set_magicdefmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_magicdefmax() const;
  void _internal_set_magicdefmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 magicDefMin = 10;
  void clear_magicdefmin();
  ::PROTOBUF_NAMESPACE_ID::int32 magicdefmin() const;
  void set_magicdefmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_magicdefmin() const;
  void _internal_set_magicdefmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 accurate = 11;
  void clear_accurate();
  ::PROTOBUF_NAMESPACE_ID::int32 accurate() const;
  void set_accurate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accurate() const;
  void _internal_set_accurate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dodge = 12;
  void clear_dodge();
  ::PROTOBUF_NAMESPACE_ID::int32 dodge() const;
  void set_dodge(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dodge() const;
  void _internal_set_dodge(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 poisonRecover = 13;
  void clear_poisonrecover();
  ::PROTOBUF_NAMESPACE_ID::int32 poisonrecover() const;
  void set_poisonrecover(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poisonrecover() const;
  void _internal_set_poisonrecover(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 heathRecover = 14;
  void clear_heathrecover();
  ::PROTOBUF_NAMESPACE_ID::int32 heathrecover() const;
  void set_heathrecover(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heathrecover() const;
  void _internal_set_heathrecover(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attackSpeed = 15;
  void clear_attackspeed();
  ::PROTOBUF_NAMESPACE_ID::int32 attackspeed() const;
  void set_attackspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attackspeed() const;
  void _internal_set_attackspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxHp = 16;
  void clear_maxhp();
  ::PROTOBUF_NAMESPACE_ID::int32 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxhp() const;
  void _internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxMp = 17;
  void clear_maxmp();
  ::PROTOBUF_NAMESPACE_ID::int32 maxmp() const;
  void set_maxmp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxmp() const;
  void _internal_set_maxmp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 magicRecover = 18;
  void clear_magicrecover();
  ::PROTOBUF_NAMESPACE_ID::int32 magicrecover() const;
  void set_magicrecover(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_magicrecover() const;
  void _internal_set_magicrecover(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 luck = 19;
  void clear_luck();
  ::PROTOBUF_NAMESPACE_ID::int32 luck() const;
  void set_luck(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_luck() const;
  void _internal_set_luck(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 critical = 20;
  void clear_critical();
  ::PROTOBUF_NAMESPACE_ID::int32 critical() const;
  void set_critical(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_critical() const;
  void _internal_set_critical(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nbValue = 21;
  void clear_nbvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 nbvalue() const;
  void set_nbvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nbvalue() const;
  void _internal_set_nbvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 criticalDamage = 22;
  void clear_criticaldamage();
  ::PROTOBUF_NAMESPACE_ID::int32 criticaldamage() const;
  void set_criticaldamage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_criticaldamage() const;
  void _internal_set_criticaldamage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxInnerPower = 23;
  void clear_maxinnerpower();
  ::PROTOBUF_NAMESPACE_ID::int32 maxinnerpower() const;
  void set_maxinnerpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxinnerpower() const;
  void _internal_set_maxinnerpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 resistance = 24;
  void clear_resistance();
  ::PROTOBUF_NAMESPACE_ID::int32 resistance() const;
  void set_resistance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resistance() const;
  void _internal_set_resistance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 holyAtt = 25;
  void clear_holyatt();
  ::PROTOBUF_NAMESPACE_ID::int32 holyatt() const;
  void set_holyatt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_holyatt() const;
  void _internal_set_holyatt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pkAtk = 26;
  void clear_pkatk();
  ::PROTOBUF_NAMESPACE_ID::int32 pkatk() const;
  void set_pkatk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pkatk() const;
  void _internal_set_pkatk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pkDef = 27;
  void clear_pkdef();
  ::PROTOBUF_NAMESPACE_ID::int32 pkdef() const;
  void set_pkdef(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pkdef() const;
  void _internal_set_pkdef(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.PlayerAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 phyattmax_;
  ::PROTOBUF_NAMESPACE_ID::int32 phyattmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 magicattmax_;
  ::PROTOBUF_NAMESPACE_ID::int32 magicattmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 taoattmax_;
  ::PROTOBUF_NAMESPACE_ID::int32 taoattmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 phydefmax_;
  ::PROTOBUF_NAMESPACE_ID::int32 phydefmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 magicdefmax_;
  ::PROTOBUF_NAMESPACE_ID::int32 magicdefmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 accurate_;
  ::PROTOBUF_NAMESPACE_ID::int32 dodge_;
  ::PROTOBUF_NAMESPACE_ID::int32 poisonrecover_;
  ::PROTOBUF_NAMESPACE_ID::int32 heathrecover_;
  ::PROTOBUF_NAMESPACE_ID::int32 attackspeed_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxhp_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxmp_;
  ::PROTOBUF_NAMESPACE_ID::int32 magicrecover_;
  ::PROTOBUF_NAMESPACE_ID::int32 luck_;
  ::PROTOBUF_NAMESPACE_ID::int32 critical_;
  ::PROTOBUF_NAMESPACE_ID::int32 nbvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 criticaldamage_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxinnerpower_;
  ::PROTOBUF_NAMESPACE_ID::int32 resistance_;
  ::PROTOBUF_NAMESPACE_ID::int32 holyatt_;
  ::PROTOBUF_NAMESPACE_ID::int32 pkatk_;
  ::PROTOBUF_NAMESPACE_ID::int32 pkdef_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginNameFieldNumber = 1,
    kSignFieldNumber = 4,
    kPlatformIdFieldNumber = 2,
    kServerIdFieldNumber = 3,
    kTimeFieldNumber = 5,
  };
  // string loginName = 1;
  void clear_loginname();
  const std::string& loginname() const;
  void set_loginname(const std::string& value);
  void set_loginname(std::string&& value);
  void set_loginname(const char* value);
  void set_loginname(const char* value, size_t size);
  std::string* mutable_loginname();
  std::string* release_loginname();
  void set_allocated_loginname(std::string* loginname);
  private:
  const std::string& _internal_loginname() const;
  void _internal_set_loginname(const std::string& value);
  std::string* _internal_mutable_loginname();
  public:

  // string sign = 4;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // int32 platformId = 2;
  void clear_platformid();
  ::PROTOBUF_NAMESPACE_ID::int32 platformid() const;
  void set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_platformid() const;
  void _internal_set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 serverId = 3;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::int32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 time = 5;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:user.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::int32 platformid_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleListFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // repeated .user.RoleInfo roleList = 1;
  int rolelist_size() const;
  private:
  int _internal_rolelist_size() const;
  public:
  void clear_rolelist();
  ::user::RoleInfo* mutable_rolelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::RoleInfo >*
      mutable_rolelist();
  private:
  const ::user::RoleInfo& _internal_rolelist(int index) const;
  ::user::RoleInfo* _internal_add_rolelist();
  public:
  const ::user::RoleInfo& rolelist(int index) const;
  ::user::RoleInfo* add_rolelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::RoleInfo >&
      rolelist() const;

  // int64 userId = 2;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int64 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:user.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::RoleInfo > rolelist_;
  ::PROTOBUF_NAMESPACE_ID::int64 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CreateRoleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.CreateRoleRequest) */ {
 public:
  inline CreateRoleRequest() : CreateRoleRequest(nullptr) {}
  virtual ~CreateRoleRequest();

  CreateRoleRequest(const CreateRoleRequest& from);
  CreateRoleRequest(CreateRoleRequest&& from) noexcept
    : CreateRoleRequest() {
    *this = ::std::move(from);
  }

  inline CreateRoleRequest& operator=(const CreateRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoleRequest& operator=(CreateRoleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateRoleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoleRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRoleRequest*>(
               &_CreateRoleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateRoleRequest& a, CreateRoleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRoleRequest* New() const final {
    return CreateMaybeMessage<CreateRoleRequest>(nullptr);
  }

  CreateRoleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateRoleRequest& from);
  void MergeFrom(const CreateRoleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.CreateRoleRequest";
  }
  protected:
  explicit CreateRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSexFieldNumber = 2,
    kCareerFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 sex = 2;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 career = 3;
  void clear_career();
  ::PROTOBUF_NAMESPACE_ID::int32 career() const;
  void set_career(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_career() const;
  void _internal_set_career(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.CreateRoleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 career_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class RandomRoleNameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.RandomRoleNameResponse) */ {
 public:
  inline RandomRoleNameResponse() : RandomRoleNameResponse(nullptr) {}
  virtual ~RandomRoleNameResponse();

  RandomRoleNameResponse(const RandomRoleNameResponse& from);
  RandomRoleNameResponse(RandomRoleNameResponse&& from) noexcept
    : RandomRoleNameResponse() {
    *this = ::std::move(from);
  }

  inline RandomRoleNameResponse& operator=(const RandomRoleNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RandomRoleNameResponse& operator=(RandomRoleNameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RandomRoleNameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RandomRoleNameResponse* internal_default_instance() {
    return reinterpret_cast<const RandomRoleNameResponse*>(
               &_RandomRoleNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RandomRoleNameResponse& a, RandomRoleNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RandomRoleNameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RandomRoleNameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RandomRoleNameResponse* New() const final {
    return CreateMaybeMessage<RandomRoleNameResponse>(nullptr);
  }

  RandomRoleNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RandomRoleNameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RandomRoleNameResponse& from);
  void MergeFrom(const RandomRoleNameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomRoleNameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.RandomRoleNameResponse";
  }
  protected:
  explicit RandomRoleNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:user.RandomRoleNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class RandomRoleNameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.RandomRoleNameRequest) */ {
 public:
  inline RandomRoleNameRequest() : RandomRoleNameRequest(nullptr) {}
  virtual ~RandomRoleNameRequest();

  RandomRoleNameRequest(const RandomRoleNameRequest& from);
  RandomRoleNameRequest(RandomRoleNameRequest&& from) noexcept
    : RandomRoleNameRequest() {
    *this = ::std::move(from);
  }

  inline RandomRoleNameRequest& operator=(const RandomRoleNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RandomRoleNameRequest& operator=(RandomRoleNameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RandomRoleNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RandomRoleNameRequest* internal_default_instance() {
    return reinterpret_cast<const RandomRoleNameRequest*>(
               &_RandomRoleNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RandomRoleNameRequest& a, RandomRoleNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RandomRoleNameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RandomRoleNameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RandomRoleNameRequest* New() const final {
    return CreateMaybeMessage<RandomRoleNameRequest>(nullptr);
  }

  RandomRoleNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RandomRoleNameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RandomRoleNameRequest& from);
  void MergeFrom(const RandomRoleNameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomRoleNameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.RandomRoleNameRequest";
  }
  protected:
  explicit RandomRoleNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSexFieldNumber = 1,
  };
  // int32 sex = 1;
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.RandomRoleNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class RoleIdMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.RoleIdMsg) */ {
 public:
  inline RoleIdMsg() : RoleIdMsg(nullptr) {}
  virtual ~RoleIdMsg();

  RoleIdMsg(const RoleIdMsg& from);
  RoleIdMsg(RoleIdMsg&& from) noexcept
    : RoleIdMsg() {
    *this = ::std::move(from);
  }

  inline RoleIdMsg& operator=(const RoleIdMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleIdMsg& operator=(RoleIdMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleIdMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleIdMsg* internal_default_instance() {
    return reinterpret_cast<const RoleIdMsg*>(
               &_RoleIdMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RoleIdMsg& a, RoleIdMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleIdMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleIdMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleIdMsg* New() const final {
    return CreateMaybeMessage<RoleIdMsg>(nullptr);
  }

  RoleIdMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleIdMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleIdMsg& from);
  void MergeFrom(const RoleIdMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleIdMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.RoleIdMsg";
  }
  protected:
  explicit RoleIdMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdFieldNumber = 1,
  };
  // int64 roleId = 1;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:user.RoleIdMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GMCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GMCommand) */ {
 public:
  inline GMCommand() : GMCommand(nullptr) {}
  virtual ~GMCommand();

  GMCommand(const GMCommand& from);
  GMCommand(GMCommand&& from) noexcept
    : GMCommand() {
    *this = ::std::move(from);
  }

  inline GMCommand& operator=(const GMCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GMCommand& operator=(GMCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GMCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GMCommand* internal_default_instance() {
    return reinterpret_cast<const GMCommand*>(
               &_GMCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GMCommand& a, GMCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GMCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GMCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GMCommand* New() const final {
    return CreateMaybeMessage<GMCommand>(nullptr);
  }

  GMCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GMCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GMCommand& from);
  void MergeFrom(const GMCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GMCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.GMCommand";
  }
  protected:
  explicit GMCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:user.GMCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CloseServerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.CloseServerResponse) */ {
 public:
  inline CloseServerResponse() : CloseServerResponse(nullptr) {}
  virtual ~CloseServerResponse();

  CloseServerResponse(const CloseServerResponse& from);
  CloseServerResponse(CloseServerResponse&& from) noexcept
    : CloseServerResponse() {
    *this = ::std::move(from);
  }

  inline CloseServerResponse& operator=(const CloseServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseServerResponse& operator=(CloseServerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseServerResponse* internal_default_instance() {
    return reinterpret_cast<const CloseServerResponse*>(
               &_CloseServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CloseServerResponse& a, CloseServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseServerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseServerResponse* New() const final {
    return CreateMaybeMessage<CloseServerResponse>(nullptr);
  }

  CloseServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseServerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseServerResponse& from);
  void MergeFrom(const CloseServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.CloseServerResponse";
  }
  protected:
  explicit CloseServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:user.CloseServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class ReconnectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.ReconnectRequest) */ {
 public:
  inline ReconnectRequest() : ReconnectRequest(nullptr) {}
  virtual ~ReconnectRequest();

  ReconnectRequest(const ReconnectRequest& from);
  ReconnectRequest(ReconnectRequest&& from) noexcept
    : ReconnectRequest() {
    *this = ::std::move(from);
  }

  inline ReconnectRequest& operator=(const ReconnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconnectRequest& operator=(ReconnectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReconnectRequest* internal_default_instance() {
    return reinterpret_cast<const ReconnectRequest*>(
               &_ReconnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReconnectRequest& a, ReconnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconnectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReconnectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconnectRequest* New() const final {
    return CreateMaybeMessage<ReconnectRequest>(nullptr);
  }

  ReconnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconnectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconnectRequest& from);
  void MergeFrom(const ReconnectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconnectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.ReconnectRequest";
  }
  protected:
  explicit ReconnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginNameFieldNumber = 1,
    kSignFieldNumber = 5,
    kServerIdFieldNumber = 2,
    kPlatformIdFieldNumber = 3,
    kRoleIdFieldNumber = 4,
    kTimeFieldNumber = 6,
    kChangeLineFieldNumber = 7,
  };
  // string loginName = 1;
  void clear_loginname();
  const std::string& loginname() const;
  void set_loginname(const std::string& value);
  void set_loginname(std::string&& value);
  void set_loginname(const char* value);
  void set_loginname(const char* value, size_t size);
  std::string* mutable_loginname();
  std::string* release_loginname();
  void set_allocated_loginname(std::string* loginname);
  private:
  const std::string& _internal_loginname() const;
  void _internal_set_loginname(const std::string& value);
  std::string* _internal_mutable_loginname();
  public:

  // string sign = 5;
  void clear_sign();
  const std::string& sign() const;
  void set_sign(const std::string& value);
  void set_sign(std::string&& value);
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  std::string* mutable_sign();
  std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // int32 serverId = 2;
  void clear_serverid();
  ::PROTOBUF_NAMESPACE_ID::int32 serverid() const;
  void set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serverid() const;
  void _internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 platformId = 3;
  void clear_platformid();
  ::PROTOBUF_NAMESPACE_ID::int32 platformid() const;
  void set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_platformid() const;
  void _internal_set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 roleId = 4;
  void clear_roleid();
  ::PROTOBUF_NAMESPACE_ID::int64 roleid() const;
  void set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roleid() const;
  void _internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time = 6;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool changeLine = 7;
  void clear_changeline();
  bool changeline() const;
  void set_changeline(bool value);
  private:
  bool _internal_changeline() const;
  void _internal_set_changeline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:user.ReconnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::int32 serverid_;
  ::PROTOBUF_NAMESPACE_ID::int32 platformid_;
  ::PROTOBUF_NAMESPACE_ID::int64 roleid_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  bool changeline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class DisconnectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.DisconnectResponse) */ {
 public:
  inline DisconnectResponse() : DisconnectResponse(nullptr) {}
  virtual ~DisconnectResponse();

  DisconnectResponse(const DisconnectResponse& from);
  DisconnectResponse(DisconnectResponse&& from) noexcept
    : DisconnectResponse() {
    *this = ::std::move(from);
  }

  inline DisconnectResponse& operator=(const DisconnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectResponse& operator=(DisconnectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisconnectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectResponse* internal_default_instance() {
    return reinterpret_cast<const DisconnectResponse*>(
               &_DisconnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DisconnectResponse& a, DisconnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisconnectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisconnectResponse* New() const final {
    return CreateMaybeMessage<DisconnectResponse>(nullptr);
  }

  DisconnectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisconnectResponse& from);
  void MergeFrom(const DisconnectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.DisconnectResponse";
  }
  protected:
  explicit DisconnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // .user.GoingDownReason reason = 1;
  void clear_reason();
  ::user::GoingDownReason reason() const;
  void set_reason(::user::GoingDownReason value);
  private:
  ::user::GoingDownReason _internal_reason() const;
  void _internal_set_reason(::user::GoingDownReason value);
  public:

  // @@protoc_insertion_point(class_scope:user.DisconnectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class UserFeedbackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.UserFeedbackRequest) */ {
 public:
  inline UserFeedbackRequest() : UserFeedbackRequest(nullptr) {}
  virtual ~UserFeedbackRequest();

  UserFeedbackRequest(const UserFeedbackRequest& from);
  UserFeedbackRequest(UserFeedbackRequest&& from) noexcept
    : UserFeedbackRequest() {
    *this = ::std::move(from);
  }

  inline UserFeedbackRequest& operator=(const UserFeedbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserFeedbackRequest& operator=(UserFeedbackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserFeedbackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserFeedbackRequest* internal_default_instance() {
    return reinterpret_cast<const UserFeedbackRequest*>(
               &_UserFeedbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UserFeedbackRequest& a, UserFeedbackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserFeedbackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserFeedbackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserFeedbackRequest* New() const final {
    return CreateMaybeMessage<UserFeedbackRequest>(nullptr);
  }

  UserFeedbackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserFeedbackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserFeedbackRequest& from);
  void MergeFrom(const UserFeedbackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserFeedbackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.UserFeedbackRequest";
  }
  protected:
  explicit UserFeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kPhoneTypeFieldNumber = 2,
    kQqFieldNumber = 3,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string phoneType = 2;
  void clear_phonetype();
  const std::string& phonetype() const;
  void set_phonetype(const std::string& value);
  void set_phonetype(std::string&& value);
  void set_phonetype(const char* value);
  void set_phonetype(const char* value, size_t size);
  std::string* mutable_phonetype();
  std::string* release_phonetype();
  void set_allocated_phonetype(std::string* phonetype);
  private:
  const std::string& _internal_phonetype() const;
  void _internal_set_phonetype(const std::string& value);
  std::string* _internal_mutable_phonetype();
  public:

  // string qq = 3;
  void clear_qq();
  const std::string& qq() const;
  void set_qq(const std::string& value);
  void set_qq(std::string&& value);
  void set_qq(const char* value);
  void set_qq(const char* value, size_t size);
  std::string* mutable_qq();
  std::string* release_qq();
  void set_allocated_qq(std::string* qq);
  private:
  const std::string& _internal_qq() const;
  void _internal_set_qq(const std::string& value);
  std::string* _internal_mutable_qq();
  public:

  // @@protoc_insertion_point(class_scope:user.UserFeedbackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class BindPhoneNumberRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.BindPhoneNumberRequest) */ {
 public:
  inline BindPhoneNumberRequest() : BindPhoneNumberRequest(nullptr) {}
  virtual ~BindPhoneNumberRequest();

  BindPhoneNumberRequest(const BindPhoneNumberRequest& from);
  BindPhoneNumberRequest(BindPhoneNumberRequest&& from) noexcept
    : BindPhoneNumberRequest() {
    *this = ::std::move(from);
  }

  inline BindPhoneNumberRequest& operator=(const BindPhoneNumberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindPhoneNumberRequest& operator=(BindPhoneNumberRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BindPhoneNumberRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BindPhoneNumberRequest* internal_default_instance() {
    return reinterpret_cast<const BindPhoneNumberRequest*>(
               &_BindPhoneNumberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BindPhoneNumberRequest& a, BindPhoneNumberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BindPhoneNumberRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BindPhoneNumberRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BindPhoneNumberRequest* New() const final {
    return CreateMaybeMessage<BindPhoneNumberRequest>(nullptr);
  }

  BindPhoneNumberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BindPhoneNumberRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BindPhoneNumberRequest& from);
  void MergeFrom(const BindPhoneNumberRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindPhoneNumberRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.BindPhoneNumberRequest";
  }
  protected:
  explicit BindPhoneNumberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumberFieldNumber = 1,
  };
  // string phoneNumber = 1;
  void clear_phonenumber();
  const std::string& phonenumber() const;
  void set_phonenumber(const std::string& value);
  void set_phonenumber(std::string&& value);
  void set_phonenumber(const char* value);
  void set_phonenumber(const char* value, size_t size);
  std::string* mutable_phonenumber();
  std::string* release_phonenumber();
  void set_allocated_phonenumber(std::string* phonenumber);
  private:
  const std::string& _internal_phonenumber() const;
  void _internal_set_phonenumber(const std::string& value);
  std::string* _internal_mutable_phonenumber();
  public:

  // @@protoc_insertion_point(class_scope:user.BindPhoneNumberRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonenumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class RechargeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.RechargeRequest) */ {
 public:
  inline RechargeRequest() : RechargeRequest(nullptr) {}
  virtual ~RechargeRequest();

  RechargeRequest(const RechargeRequest& from);
  RechargeRequest(RechargeRequest&& from) noexcept
    : RechargeRequest() {
    *this = ::std::move(from);
  }

  inline RechargeRequest& operator=(const RechargeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RechargeRequest& operator=(RechargeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RechargeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RechargeRequest* internal_default_instance() {
    return reinterpret_cast<const RechargeRequest*>(
               &_RechargeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RechargeRequest& a, RechargeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RechargeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RechargeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RechargeRequest* New() const final {
    return CreateMaybeMessage<RechargeRequest>(nullptr);
  }

  RechargeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RechargeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RechargeRequest& from);
  void MergeFrom(const RechargeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RechargeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.RechargeRequest";
  }
  protected:
  explicit RechargeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRechargeIdFieldNumber = 1,
  };
  // string rechargeId = 1;
  void clear_rechargeid();
  const std::string& rechargeid() const;
  void set_rechargeid(const std::string& value);
  void set_rechargeid(std::string&& value);
  void set_rechargeid(const char* value);
  void set_rechargeid(const char* value, size_t size);
  std::string* mutable_rechargeid();
  std::string* release_rechargeid();
  void set_allocated_rechargeid(std::string* rechargeid);
  private:
  const std::string& _internal_rechargeid() const;
  void _internal_set_rechargeid(const std::string& value);
  std::string* _internal_mutable_rechargeid();
  public:

  // @@protoc_insertion_point(class_scope:user.RechargeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rechargeid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoleInfo

// int64 roleId = 1;
inline void RoleInfo::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleInfo::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleInfo::roleid() const {
  // @@protoc_insertion_point(field_get:user.RoleInfo.roleId)
  return _internal_roleid();
}
inline void RoleInfo::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void RoleInfo::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:user.RoleInfo.roleId)
}

// string roleName = 2;
inline void RoleInfo::clear_rolename() {
  rolename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RoleInfo::rolename() const {
  // @@protoc_insertion_point(field_get:user.RoleInfo.roleName)
  return _internal_rolename();
}
inline void RoleInfo::set_rolename(const std::string& value) {
  _internal_set_rolename(value);
  // @@protoc_insertion_point(field_set:user.RoleInfo.roleName)
}
inline std::string* RoleInfo::mutable_rolename() {
  // @@protoc_insertion_point(field_mutable:user.RoleInfo.roleName)
  return _internal_mutable_rolename();
}
inline const std::string& RoleInfo::_internal_rolename() const {
  return rolename_.Get();
}
inline void RoleInfo::_internal_set_rolename(const std::string& value) {
  
  rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RoleInfo::set_rolename(std::string&& value) {
  
  rolename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.RoleInfo.roleName)
}
inline void RoleInfo::set_rolename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.RoleInfo.roleName)
}
inline void RoleInfo::set_rolename(const char* value,
    size_t size) {
  
  rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.RoleInfo.roleName)
}
inline std::string* RoleInfo::_internal_mutable_rolename() {
  
  return rolename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RoleInfo::release_rolename() {
  // @@protoc_insertion_point(field_release:user.RoleInfo.roleName)
  return rolename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RoleInfo::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    
  } else {
    
  }
  rolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rolename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.RoleInfo.roleName)
}

// int32 level = 3;
inline void RoleInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::level() const {
  // @@protoc_insertion_point(field_get:user.RoleInfo.level)
  return _internal_level();
}
inline void RoleInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void RoleInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:user.RoleInfo.level)
}

// int32 sex = 4;
inline void RoleInfo::clear_sex() {
  sex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::sex() const {
  // @@protoc_insertion_point(field_get:user.RoleInfo.sex)
  return _internal_sex();
}
inline void RoleInfo::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sex_ = value;
}
inline void RoleInfo::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:user.RoleInfo.sex)
}

// int32 mapId = 5;
inline void RoleInfo::clear_mapid() {
  mapid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::mapid() const {
  // @@protoc_insertion_point(field_get:user.RoleInfo.mapId)
  return _internal_mapid();
}
inline void RoleInfo::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mapid_ = value;
}
inline void RoleInfo::set_mapid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:user.RoleInfo.mapId)
}

// int32 line = 6;
inline void RoleInfo::clear_line() {
  line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::line() const {
  // @@protoc_insertion_point(field_get:user.RoleInfo.line)
  return _internal_line();
}
inline void RoleInfo::_internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_ = value;
}
inline void RoleInfo::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:user.RoleInfo.line)
}

// int32 curServerType = 7;
inline void RoleInfo::clear_curservertype() {
  curservertype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::_internal_curservertype() const {
  return curservertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleInfo::curservertype() const {
  // @@protoc_insertion_point(field_get:user.RoleInfo.curServerType)
  return _internal_curservertype();
}
inline void RoleInfo::_internal_set_curservertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curservertype_ = value;
}
inline void RoleInfo::set_curservertype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curservertype(value);
  // @@protoc_insertion_point(field_set:user.RoleInfo.curServerType)
}

// -------------------------------------------------------------------

// PlayerAttribute

// int32 phyAttMax = 1;
inline void PlayerAttribute::clear_phyattmax() {
  phyattmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_phyattmax() const {
  return phyattmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::phyattmax() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.phyAttMax)
  return _internal_phyattmax();
}
inline void PlayerAttribute::_internal_set_phyattmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  phyattmax_ = value;
}
inline void PlayerAttribute::set_phyattmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phyattmax(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.phyAttMax)
}

// int32 phyAttMin = 2;
inline void PlayerAttribute::clear_phyattmin() {
  phyattmin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_phyattmin() const {
  return phyattmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::phyattmin() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.phyAttMin)
  return _internal_phyattmin();
}
inline void PlayerAttribute::_internal_set_phyattmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  phyattmin_ = value;
}
inline void PlayerAttribute::set_phyattmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phyattmin(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.phyAttMin)
}

// int32 magicAttMax = 3;
inline void PlayerAttribute::clear_magicattmax() {
  magicattmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_magicattmax() const {
  return magicattmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::magicattmax() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.magicAttMax)
  return _internal_magicattmax();
}
inline void PlayerAttribute::_internal_set_magicattmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  magicattmax_ = value;
}
inline void PlayerAttribute::set_magicattmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_magicattmax(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.magicAttMax)
}

// int32 magicAttMin = 4;
inline void PlayerAttribute::clear_magicattmin() {
  magicattmin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_magicattmin() const {
  return magicattmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::magicattmin() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.magicAttMin)
  return _internal_magicattmin();
}
inline void PlayerAttribute::_internal_set_magicattmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  magicattmin_ = value;
}
inline void PlayerAttribute::set_magicattmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_magicattmin(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.magicAttMin)
}

// int32 taoAttMax = 5;
inline void PlayerAttribute::clear_taoattmax() {
  taoattmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_taoattmax() const {
  return taoattmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::taoattmax() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.taoAttMax)
  return _internal_taoattmax();
}
inline void PlayerAttribute::_internal_set_taoattmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taoattmax_ = value;
}
inline void PlayerAttribute::set_taoattmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taoattmax(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.taoAttMax)
}

// int32 taoAttMin = 6;
inline void PlayerAttribute::clear_taoattmin() {
  taoattmin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_taoattmin() const {
  return taoattmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::taoattmin() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.taoAttMin)
  return _internal_taoattmin();
}
inline void PlayerAttribute::_internal_set_taoattmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taoattmin_ = value;
}
inline void PlayerAttribute::set_taoattmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taoattmin(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.taoAttMin)
}

// int32 phyDefMax = 7;
inline void PlayerAttribute::clear_phydefmax() {
  phydefmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_phydefmax() const {
  return phydefmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::phydefmax() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.phyDefMax)
  return _internal_phydefmax();
}
inline void PlayerAttribute::_internal_set_phydefmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  phydefmax_ = value;
}
inline void PlayerAttribute::set_phydefmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phydefmax(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.phyDefMax)
}

// int32 phyDefMin = 8;
inline void PlayerAttribute::clear_phydefmin() {
  phydefmin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_phydefmin() const {
  return phydefmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::phydefmin() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.phyDefMin)
  return _internal_phydefmin();
}
inline void PlayerAttribute::_internal_set_phydefmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  phydefmin_ = value;
}
inline void PlayerAttribute::set_phydefmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_phydefmin(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.phyDefMin)
}

// int32 magicDefMax = 9;
inline void PlayerAttribute::clear_magicdefmax() {
  magicdefmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_magicdefmax() const {
  return magicdefmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::magicdefmax() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.magicDefMax)
  return _internal_magicdefmax();
}
inline void PlayerAttribute::_internal_set_magicdefmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  magicdefmax_ = value;
}
inline void PlayerAttribute::set_magicdefmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_magicdefmax(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.magicDefMax)
}

// int32 magicDefMin = 10;
inline void PlayerAttribute::clear_magicdefmin() {
  magicdefmin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_magicdefmin() const {
  return magicdefmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::magicdefmin() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.magicDefMin)
  return _internal_magicdefmin();
}
inline void PlayerAttribute::_internal_set_magicdefmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  magicdefmin_ = value;
}
inline void PlayerAttribute::set_magicdefmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_magicdefmin(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.magicDefMin)
}

// int32 accurate = 11;
inline void PlayerAttribute::clear_accurate() {
  accurate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_accurate() const {
  return accurate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::accurate() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.accurate)
  return _internal_accurate();
}
inline void PlayerAttribute::_internal_set_accurate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accurate_ = value;
}
inline void PlayerAttribute::set_accurate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accurate(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.accurate)
}

// int32 dodge = 12;
inline void PlayerAttribute::clear_dodge() {
  dodge_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_dodge() const {
  return dodge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::dodge() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.dodge)
  return _internal_dodge();
}
inline void PlayerAttribute::_internal_set_dodge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dodge_ = value;
}
inline void PlayerAttribute::set_dodge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dodge(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.dodge)
}

// int32 poisonRecover = 13;
inline void PlayerAttribute::clear_poisonrecover() {
  poisonrecover_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_poisonrecover() const {
  return poisonrecover_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::poisonrecover() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.poisonRecover)
  return _internal_poisonrecover();
}
inline void PlayerAttribute::_internal_set_poisonrecover(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  poisonrecover_ = value;
}
inline void PlayerAttribute::set_poisonrecover(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poisonrecover(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.poisonRecover)
}

// int32 heathRecover = 14;
inline void PlayerAttribute::clear_heathrecover() {
  heathrecover_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_heathrecover() const {
  return heathrecover_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::heathrecover() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.heathRecover)
  return _internal_heathrecover();
}
inline void PlayerAttribute::_internal_set_heathrecover(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  heathrecover_ = value;
}
inline void PlayerAttribute::set_heathrecover(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heathrecover(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.heathRecover)
}

// int32 attackSpeed = 15;
inline void PlayerAttribute::clear_attackspeed() {
  attackspeed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_attackspeed() const {
  return attackspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::attackspeed() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.attackSpeed)
  return _internal_attackspeed();
}
inline void PlayerAttribute::_internal_set_attackspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attackspeed_ = value;
}
inline void PlayerAttribute::set_attackspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attackspeed(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.attackSpeed)
}

// int32 maxHp = 16;
inline void PlayerAttribute::clear_maxhp() {
  maxhp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_maxhp() const {
  return maxhp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::maxhp() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.maxHp)
  return _internal_maxhp();
}
inline void PlayerAttribute::_internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxhp_ = value;
}
inline void PlayerAttribute::set_maxhp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.maxHp)
}

// int32 maxMp = 17;
inline void PlayerAttribute::clear_maxmp() {
  maxmp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_maxmp() const {
  return maxmp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::maxmp() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.maxMp)
  return _internal_maxmp();
}
inline void PlayerAttribute::_internal_set_maxmp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxmp_ = value;
}
inline void PlayerAttribute::set_maxmp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxmp(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.maxMp)
}

// int32 magicRecover = 18;
inline void PlayerAttribute::clear_magicrecover() {
  magicrecover_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_magicrecover() const {
  return magicrecover_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::magicrecover() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.magicRecover)
  return _internal_magicrecover();
}
inline void PlayerAttribute::_internal_set_magicrecover(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  magicrecover_ = value;
}
inline void PlayerAttribute::set_magicrecover(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_magicrecover(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.magicRecover)
}

// int32 luck = 19;
inline void PlayerAttribute::clear_luck() {
  luck_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_luck() const {
  return luck_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::luck() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.luck)
  return _internal_luck();
}
inline void PlayerAttribute::_internal_set_luck(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  luck_ = value;
}
inline void PlayerAttribute::set_luck(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_luck(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.luck)
}

// int32 critical = 20;
inline void PlayerAttribute::clear_critical() {
  critical_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_critical() const {
  return critical_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::critical() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.critical)
  return _internal_critical();
}
inline void PlayerAttribute::_internal_set_critical(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  critical_ = value;
}
inline void PlayerAttribute::set_critical(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_critical(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.critical)
}

// int32 nbValue = 21;
inline void PlayerAttribute::clear_nbvalue() {
  nbvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_nbvalue() const {
  return nbvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::nbvalue() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.nbValue)
  return _internal_nbvalue();
}
inline void PlayerAttribute::_internal_set_nbvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nbvalue_ = value;
}
inline void PlayerAttribute::set_nbvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nbvalue(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.nbValue)
}

// int32 criticalDamage = 22;
inline void PlayerAttribute::clear_criticaldamage() {
  criticaldamage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_criticaldamage() const {
  return criticaldamage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::criticaldamage() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.criticalDamage)
  return _internal_criticaldamage();
}
inline void PlayerAttribute::_internal_set_criticaldamage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  criticaldamage_ = value;
}
inline void PlayerAttribute::set_criticaldamage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_criticaldamage(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.criticalDamage)
}

// int32 maxInnerPower = 23;
inline void PlayerAttribute::clear_maxinnerpower() {
  maxinnerpower_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_maxinnerpower() const {
  return maxinnerpower_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::maxinnerpower() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.maxInnerPower)
  return _internal_maxinnerpower();
}
inline void PlayerAttribute::_internal_set_maxinnerpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxinnerpower_ = value;
}
inline void PlayerAttribute::set_maxinnerpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxinnerpower(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.maxInnerPower)
}

// int32 resistance = 24;
inline void PlayerAttribute::clear_resistance() {
  resistance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_resistance() const {
  return resistance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::resistance() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.resistance)
  return _internal_resistance();
}
inline void PlayerAttribute::_internal_set_resistance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resistance_ = value;
}
inline void PlayerAttribute::set_resistance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resistance(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.resistance)
}

// int32 holyAtt = 25;
inline void PlayerAttribute::clear_holyatt() {
  holyatt_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_holyatt() const {
  return holyatt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::holyatt() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.holyAtt)
  return _internal_holyatt();
}
inline void PlayerAttribute::_internal_set_holyatt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  holyatt_ = value;
}
inline void PlayerAttribute::set_holyatt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_holyatt(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.holyAtt)
}

// int32 pkAtk = 26;
inline void PlayerAttribute::clear_pkatk() {
  pkatk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_pkatk() const {
  return pkatk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::pkatk() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.pkAtk)
  return _internal_pkatk();
}
inline void PlayerAttribute::_internal_set_pkatk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pkatk_ = value;
}
inline void PlayerAttribute::set_pkatk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pkatk(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.pkAtk)
}

// int32 pkDef = 27;
inline void PlayerAttribute::clear_pkdef() {
  pkdef_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::_internal_pkdef() const {
  return pkdef_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAttribute::pkdef() const {
  // @@protoc_insertion_point(field_get:user.PlayerAttribute.pkDef)
  return _internal_pkdef();
}
inline void PlayerAttribute::_internal_set_pkdef(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pkdef_ = value;
}
inline void PlayerAttribute::set_pkdef(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pkdef(value);
  // @@protoc_insertion_point(field_set:user.PlayerAttribute.pkDef)
}

// -------------------------------------------------------------------

// LoginRequest

// string loginName = 1;
inline void LoginRequest::clear_loginname() {
  loginname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::loginname() const {
  // @@protoc_insertion_point(field_get:user.LoginRequest.loginName)
  return _internal_loginname();
}
inline void LoginRequest::set_loginname(const std::string& value) {
  _internal_set_loginname(value);
  // @@protoc_insertion_point(field_set:user.LoginRequest.loginName)
}
inline std::string* LoginRequest::mutable_loginname() {
  // @@protoc_insertion_point(field_mutable:user.LoginRequest.loginName)
  return _internal_mutable_loginname();
}
inline const std::string& LoginRequest::_internal_loginname() const {
  return loginname_.Get();
}
inline void LoginRequest::_internal_set_loginname(const std::string& value) {
  
  loginname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_loginname(std::string&& value) {
  
  loginname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.LoginRequest.loginName)
}
inline void LoginRequest::set_loginname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.LoginRequest.loginName)
}
inline void LoginRequest::set_loginname(const char* value,
    size_t size) {
  
  loginname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.LoginRequest.loginName)
}
inline std::string* LoginRequest::_internal_mutable_loginname() {
  
  return loginname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_loginname() {
  // @@protoc_insertion_point(field_release:user.LoginRequest.loginName)
  return loginname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_loginname(std::string* loginname) {
  if (loginname != nullptr) {
    
  } else {
    
  }
  loginname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.LoginRequest.loginName)
}

// int32 platformId = 2;
inline void LoginRequest::clear_platformid() {
  platformid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::_internal_platformid() const {
  return platformid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::platformid() const {
  // @@protoc_insertion_point(field_get:user.LoginRequest.platformId)
  return _internal_platformid();
}
inline void LoginRequest::_internal_set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  platformid_ = value;
}
inline void LoginRequest::set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_platformid(value);
  // @@protoc_insertion_point(field_set:user.LoginRequest.platformId)
}

// int32 serverId = 3;
inline void LoginRequest::clear_serverid() {
  serverid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::serverid() const {
  // @@protoc_insertion_point(field_get:user.LoginRequest.serverId)
  return _internal_serverid();
}
inline void LoginRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverid_ = value;
}
inline void LoginRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:user.LoginRequest.serverId)
}

// string sign = 4;
inline void LoginRequest::clear_sign() {
  sign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::sign() const {
  // @@protoc_insertion_point(field_get:user.LoginRequest.sign)
  return _internal_sign();
}
inline void LoginRequest::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:user.LoginRequest.sign)
}
inline std::string* LoginRequest::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:user.LoginRequest.sign)
  return _internal_mutable_sign();
}
inline const std::string& LoginRequest::_internal_sign() const {
  return sign_.Get();
}
inline void LoginRequest::_internal_set_sign(const std::string& value) {
  
  sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_sign(std::string&& value) {
  
  sign_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.LoginRequest.sign)
}
inline void LoginRequest::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.LoginRequest.sign)
}
inline void LoginRequest::set_sign(const char* value,
    size_t size) {
  
  sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.LoginRequest.sign)
}
inline std::string* LoginRequest::_internal_mutable_sign() {
  
  return sign_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_sign() {
  // @@protoc_insertion_point(field_release:user.LoginRequest.sign)
  return sign_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.LoginRequest.sign)
}

// int64 time = 5;
inline void LoginRequest::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginRequest::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginRequest::time() const {
  // @@protoc_insertion_point(field_get:user.LoginRequest.time)
  return _internal_time();
}
inline void LoginRequest::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void LoginRequest::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:user.LoginRequest.time)
}

// -------------------------------------------------------------------

// LoginResponse

// repeated .user.RoleInfo roleList = 1;
inline int LoginResponse::_internal_rolelist_size() const {
  return rolelist_.size();
}
inline int LoginResponse::rolelist_size() const {
  return _internal_rolelist_size();
}
inline void LoginResponse::clear_rolelist() {
  rolelist_.Clear();
}
inline ::user::RoleInfo* LoginResponse::mutable_rolelist(int index) {
  // @@protoc_insertion_point(field_mutable:user.LoginResponse.roleList)
  return rolelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::RoleInfo >*
LoginResponse::mutable_rolelist() {
  // @@protoc_insertion_point(field_mutable_list:user.LoginResponse.roleList)
  return &rolelist_;
}
inline const ::user::RoleInfo& LoginResponse::_internal_rolelist(int index) const {
  return rolelist_.Get(index);
}
inline const ::user::RoleInfo& LoginResponse::rolelist(int index) const {
  // @@protoc_insertion_point(field_get:user.LoginResponse.roleList)
  return _internal_rolelist(index);
}
inline ::user::RoleInfo* LoginResponse::_internal_add_rolelist() {
  return rolelist_.Add();
}
inline ::user::RoleInfo* LoginResponse::add_rolelist() {
  // @@protoc_insertion_point(field_add:user.LoginResponse.roleList)
  return _internal_add_rolelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::RoleInfo >&
LoginResponse::rolelist() const {
  // @@protoc_insertion_point(field_list:user.LoginResponse.roleList)
  return rolelist_;
}

// int64 userId = 2;
inline void LoginResponse::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginResponse::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginResponse::userid() const {
  // @@protoc_insertion_point(field_get:user.LoginResponse.userId)
  return _internal_userid();
}
inline void LoginResponse::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  userid_ = value;
}
inline void LoginResponse::set_userid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:user.LoginResponse.userId)
}

// -------------------------------------------------------------------

// CreateRoleRequest

// string name = 1;
inline void CreateRoleRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateRoleRequest::name() const {
  // @@protoc_insertion_point(field_get:user.CreateRoleRequest.name)
  return _internal_name();
}
inline void CreateRoleRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:user.CreateRoleRequest.name)
}
inline std::string* CreateRoleRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:user.CreateRoleRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateRoleRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateRoleRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateRoleRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.CreateRoleRequest.name)
}
inline void CreateRoleRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.CreateRoleRequest.name)
}
inline void CreateRoleRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.CreateRoleRequest.name)
}
inline std::string* CreateRoleRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateRoleRequest::release_name() {
  // @@protoc_insertion_point(field_release:user.CreateRoleRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateRoleRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.CreateRoleRequest.name)
}

// int32 sex = 2;
inline void CreateRoleRequest::clear_sex() {
  sex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleRequest::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleRequest::sex() const {
  // @@protoc_insertion_point(field_get:user.CreateRoleRequest.sex)
  return _internal_sex();
}
inline void CreateRoleRequest::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sex_ = value;
}
inline void CreateRoleRequest::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:user.CreateRoleRequest.sex)
}

// int32 career = 3;
inline void CreateRoleRequest::clear_career() {
  career_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleRequest::_internal_career() const {
  return career_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateRoleRequest::career() const {
  // @@protoc_insertion_point(field_get:user.CreateRoleRequest.career)
  return _internal_career();
}
inline void CreateRoleRequest::_internal_set_career(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  career_ = value;
}
inline void CreateRoleRequest::set_career(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_career(value);
  // @@protoc_insertion_point(field_set:user.CreateRoleRequest.career)
}

// -------------------------------------------------------------------

// RandomRoleNameResponse

// string name = 1;
inline void RandomRoleNameResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RandomRoleNameResponse::name() const {
  // @@protoc_insertion_point(field_get:user.RandomRoleNameResponse.name)
  return _internal_name();
}
inline void RandomRoleNameResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:user.RandomRoleNameResponse.name)
}
inline std::string* RandomRoleNameResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:user.RandomRoleNameResponse.name)
  return _internal_mutable_name();
}
inline const std::string& RandomRoleNameResponse::_internal_name() const {
  return name_.Get();
}
inline void RandomRoleNameResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RandomRoleNameResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.RandomRoleNameResponse.name)
}
inline void RandomRoleNameResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.RandomRoleNameResponse.name)
}
inline void RandomRoleNameResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.RandomRoleNameResponse.name)
}
inline std::string* RandomRoleNameResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RandomRoleNameResponse::release_name() {
  // @@protoc_insertion_point(field_release:user.RandomRoleNameResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RandomRoleNameResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.RandomRoleNameResponse.name)
}

// -------------------------------------------------------------------

// RandomRoleNameRequest

// int32 sex = 1;
inline void RandomRoleNameRequest::clear_sex() {
  sex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RandomRoleNameRequest::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RandomRoleNameRequest::sex() const {
  // @@protoc_insertion_point(field_get:user.RandomRoleNameRequest.sex)
  return _internal_sex();
}
inline void RandomRoleNameRequest::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sex_ = value;
}
inline void RandomRoleNameRequest::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:user.RandomRoleNameRequest.sex)
}

// -------------------------------------------------------------------

// RoleIdMsg

// int64 roleId = 1;
inline void RoleIdMsg::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleIdMsg::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoleIdMsg::roleid() const {
  // @@protoc_insertion_point(field_get:user.RoleIdMsg.roleId)
  return _internal_roleid();
}
inline void RoleIdMsg::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void RoleIdMsg::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:user.RoleIdMsg.roleId)
}

// -------------------------------------------------------------------

// GMCommand

// string command = 1;
inline void GMCommand::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GMCommand::command() const {
  // @@protoc_insertion_point(field_get:user.GMCommand.command)
  return _internal_command();
}
inline void GMCommand::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:user.GMCommand.command)
}
inline std::string* GMCommand::mutable_command() {
  // @@protoc_insertion_point(field_mutable:user.GMCommand.command)
  return _internal_mutable_command();
}
inline const std::string& GMCommand::_internal_command() const {
  return command_.Get();
}
inline void GMCommand::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GMCommand::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.GMCommand.command)
}
inline void GMCommand::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.GMCommand.command)
}
inline void GMCommand::set_command(const char* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.GMCommand.command)
}
inline std::string* GMCommand::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GMCommand::release_command() {
  // @@protoc_insertion_point(field_release:user.GMCommand.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GMCommand::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.GMCommand.command)
}

// -------------------------------------------------------------------

// CloseServerResponse

// int32 code = 1;
inline void CloseServerResponse::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseServerResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseServerResponse::code() const {
  // @@protoc_insertion_point(field_get:user.CloseServerResponse.code)
  return _internal_code();
}
inline void CloseServerResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void CloseServerResponse::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:user.CloseServerResponse.code)
}

// string msg = 2;
inline void CloseServerResponse::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CloseServerResponse::msg() const {
  // @@protoc_insertion_point(field_get:user.CloseServerResponse.msg)
  return _internal_msg();
}
inline void CloseServerResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:user.CloseServerResponse.msg)
}
inline std::string* CloseServerResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:user.CloseServerResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& CloseServerResponse::_internal_msg() const {
  return msg_.Get();
}
inline void CloseServerResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CloseServerResponse::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.CloseServerResponse.msg)
}
inline void CloseServerResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.CloseServerResponse.msg)
}
inline void CloseServerResponse::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.CloseServerResponse.msg)
}
inline std::string* CloseServerResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CloseServerResponse::release_msg() {
  // @@protoc_insertion_point(field_release:user.CloseServerResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloseServerResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.CloseServerResponse.msg)
}

// -------------------------------------------------------------------

// ReconnectRequest

// string loginName = 1;
inline void ReconnectRequest::clear_loginname() {
  loginname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReconnectRequest::loginname() const {
  // @@protoc_insertion_point(field_get:user.ReconnectRequest.loginName)
  return _internal_loginname();
}
inline void ReconnectRequest::set_loginname(const std::string& value) {
  _internal_set_loginname(value);
  // @@protoc_insertion_point(field_set:user.ReconnectRequest.loginName)
}
inline std::string* ReconnectRequest::mutable_loginname() {
  // @@protoc_insertion_point(field_mutable:user.ReconnectRequest.loginName)
  return _internal_mutable_loginname();
}
inline const std::string& ReconnectRequest::_internal_loginname() const {
  return loginname_.Get();
}
inline void ReconnectRequest::_internal_set_loginname(const std::string& value) {
  
  loginname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReconnectRequest::set_loginname(std::string&& value) {
  
  loginname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.ReconnectRequest.loginName)
}
inline void ReconnectRequest::set_loginname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.ReconnectRequest.loginName)
}
inline void ReconnectRequest::set_loginname(const char* value,
    size_t size) {
  
  loginname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.ReconnectRequest.loginName)
}
inline std::string* ReconnectRequest::_internal_mutable_loginname() {
  
  return loginname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReconnectRequest::release_loginname() {
  // @@protoc_insertion_point(field_release:user.ReconnectRequest.loginName)
  return loginname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReconnectRequest::set_allocated_loginname(std::string* loginname) {
  if (loginname != nullptr) {
    
  } else {
    
  }
  loginname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.ReconnectRequest.loginName)
}

// int32 serverId = 2;
inline void ReconnectRequest::clear_serverid() {
  serverid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconnectRequest::_internal_serverid() const {
  return serverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconnectRequest::serverid() const {
  // @@protoc_insertion_point(field_get:user.ReconnectRequest.serverId)
  return _internal_serverid();
}
inline void ReconnectRequest::_internal_set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serverid_ = value;
}
inline void ReconnectRequest::set_serverid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:user.ReconnectRequest.serverId)
}

// int32 platformId = 3;
inline void ReconnectRequest::clear_platformid() {
  platformid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconnectRequest::_internal_platformid() const {
  return platformid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReconnectRequest::platformid() const {
  // @@protoc_insertion_point(field_get:user.ReconnectRequest.platformId)
  return _internal_platformid();
}
inline void ReconnectRequest::_internal_set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  platformid_ = value;
}
inline void ReconnectRequest::set_platformid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_platformid(value);
  // @@protoc_insertion_point(field_set:user.ReconnectRequest.platformId)
}

// int64 roleId = 4;
inline void ReconnectRequest::clear_roleid() {
  roleid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReconnectRequest::_internal_roleid() const {
  return roleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReconnectRequest::roleid() const {
  // @@protoc_insertion_point(field_get:user.ReconnectRequest.roleId)
  return _internal_roleid();
}
inline void ReconnectRequest::_internal_set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roleid_ = value;
}
inline void ReconnectRequest::set_roleid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:user.ReconnectRequest.roleId)
}

// string sign = 5;
inline void ReconnectRequest::clear_sign() {
  sign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReconnectRequest::sign() const {
  // @@protoc_insertion_point(field_get:user.ReconnectRequest.sign)
  return _internal_sign();
}
inline void ReconnectRequest::set_sign(const std::string& value) {
  _internal_set_sign(value);
  // @@protoc_insertion_point(field_set:user.ReconnectRequest.sign)
}
inline std::string* ReconnectRequest::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:user.ReconnectRequest.sign)
  return _internal_mutable_sign();
}
inline const std::string& ReconnectRequest::_internal_sign() const {
  return sign_.Get();
}
inline void ReconnectRequest::_internal_set_sign(const std::string& value) {
  
  sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReconnectRequest::set_sign(std::string&& value) {
  
  sign_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.ReconnectRequest.sign)
}
inline void ReconnectRequest::set_sign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.ReconnectRequest.sign)
}
inline void ReconnectRequest::set_sign(const char* value,
    size_t size) {
  
  sign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.ReconnectRequest.sign)
}
inline std::string* ReconnectRequest::_internal_mutable_sign() {
  
  return sign_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReconnectRequest::release_sign() {
  // @@protoc_insertion_point(field_release:user.ReconnectRequest.sign)
  return sign_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReconnectRequest::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.ReconnectRequest.sign)
}

// int64 time = 6;
inline void ReconnectRequest::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReconnectRequest::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReconnectRequest::time() const {
  // @@protoc_insertion_point(field_get:user.ReconnectRequest.time)
  return _internal_time();
}
inline void ReconnectRequest::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void ReconnectRequest::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:user.ReconnectRequest.time)
}

// bool changeLine = 7;
inline void ReconnectRequest::clear_changeline() {
  changeline_ = false;
}
inline bool ReconnectRequest::_internal_changeline() const {
  return changeline_;
}
inline bool ReconnectRequest::changeline() const {
  // @@protoc_insertion_point(field_get:user.ReconnectRequest.changeLine)
  return _internal_changeline();
}
inline void ReconnectRequest::_internal_set_changeline(bool value) {
  
  changeline_ = value;
}
inline void ReconnectRequest::set_changeline(bool value) {
  _internal_set_changeline(value);
  // @@protoc_insertion_point(field_set:user.ReconnectRequest.changeLine)
}

// -------------------------------------------------------------------

// DisconnectResponse

// .user.GoingDownReason reason = 1;
inline void DisconnectResponse::clear_reason() {
  reason_ = 0;
}
inline ::user::GoingDownReason DisconnectResponse::_internal_reason() const {
  return static_cast< ::user::GoingDownReason >(reason_);
}
inline ::user::GoingDownReason DisconnectResponse::reason() const {
  // @@protoc_insertion_point(field_get:user.DisconnectResponse.reason)
  return _internal_reason();
}
inline void DisconnectResponse::_internal_set_reason(::user::GoingDownReason value) {
  
  reason_ = value;
}
inline void DisconnectResponse::set_reason(::user::GoingDownReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:user.DisconnectResponse.reason)
}

// -------------------------------------------------------------------

// UserFeedbackRequest

// string content = 1;
inline void UserFeedbackRequest::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserFeedbackRequest::content() const {
  // @@protoc_insertion_point(field_get:user.UserFeedbackRequest.content)
  return _internal_content();
}
inline void UserFeedbackRequest::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:user.UserFeedbackRequest.content)
}
inline std::string* UserFeedbackRequest::mutable_content() {
  // @@protoc_insertion_point(field_mutable:user.UserFeedbackRequest.content)
  return _internal_mutable_content();
}
inline const std::string& UserFeedbackRequest::_internal_content() const {
  return content_.Get();
}
inline void UserFeedbackRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserFeedbackRequest::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.UserFeedbackRequest.content)
}
inline void UserFeedbackRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.UserFeedbackRequest.content)
}
inline void UserFeedbackRequest::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.UserFeedbackRequest.content)
}
inline std::string* UserFeedbackRequest::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserFeedbackRequest::release_content() {
  // @@protoc_insertion_point(field_release:user.UserFeedbackRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserFeedbackRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.UserFeedbackRequest.content)
}

// string phoneType = 2;
inline void UserFeedbackRequest::clear_phonetype() {
  phonetype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserFeedbackRequest::phonetype() const {
  // @@protoc_insertion_point(field_get:user.UserFeedbackRequest.phoneType)
  return _internal_phonetype();
}
inline void UserFeedbackRequest::set_phonetype(const std::string& value) {
  _internal_set_phonetype(value);
  // @@protoc_insertion_point(field_set:user.UserFeedbackRequest.phoneType)
}
inline std::string* UserFeedbackRequest::mutable_phonetype() {
  // @@protoc_insertion_point(field_mutable:user.UserFeedbackRequest.phoneType)
  return _internal_mutable_phonetype();
}
inline const std::string& UserFeedbackRequest::_internal_phonetype() const {
  return phonetype_.Get();
}
inline void UserFeedbackRequest::_internal_set_phonetype(const std::string& value) {
  
  phonetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserFeedbackRequest::set_phonetype(std::string&& value) {
  
  phonetype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.UserFeedbackRequest.phoneType)
}
inline void UserFeedbackRequest::set_phonetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phonetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.UserFeedbackRequest.phoneType)
}
inline void UserFeedbackRequest::set_phonetype(const char* value,
    size_t size) {
  
  phonetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.UserFeedbackRequest.phoneType)
}
inline std::string* UserFeedbackRequest::_internal_mutable_phonetype() {
  
  return phonetype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserFeedbackRequest::release_phonetype() {
  // @@protoc_insertion_point(field_release:user.UserFeedbackRequest.phoneType)
  return phonetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserFeedbackRequest::set_allocated_phonetype(std::string* phonetype) {
  if (phonetype != nullptr) {
    
  } else {
    
  }
  phonetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phonetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.UserFeedbackRequest.phoneType)
}

// string qq = 3;
inline void UserFeedbackRequest::clear_qq() {
  qq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserFeedbackRequest::qq() const {
  // @@protoc_insertion_point(field_get:user.UserFeedbackRequest.qq)
  return _internal_qq();
}
inline void UserFeedbackRequest::set_qq(const std::string& value) {
  _internal_set_qq(value);
  // @@protoc_insertion_point(field_set:user.UserFeedbackRequest.qq)
}
inline std::string* UserFeedbackRequest::mutable_qq() {
  // @@protoc_insertion_point(field_mutable:user.UserFeedbackRequest.qq)
  return _internal_mutable_qq();
}
inline const std::string& UserFeedbackRequest::_internal_qq() const {
  return qq_.Get();
}
inline void UserFeedbackRequest::_internal_set_qq(const std::string& value) {
  
  qq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserFeedbackRequest::set_qq(std::string&& value) {
  
  qq_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.UserFeedbackRequest.qq)
}
inline void UserFeedbackRequest::set_qq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  qq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.UserFeedbackRequest.qq)
}
inline void UserFeedbackRequest::set_qq(const char* value,
    size_t size) {
  
  qq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.UserFeedbackRequest.qq)
}
inline std::string* UserFeedbackRequest::_internal_mutable_qq() {
  
  return qq_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserFeedbackRequest::release_qq() {
  // @@protoc_insertion_point(field_release:user.UserFeedbackRequest.qq)
  return qq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserFeedbackRequest::set_allocated_qq(std::string* qq) {
  if (qq != nullptr) {
    
  } else {
    
  }
  qq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.UserFeedbackRequest.qq)
}

// -------------------------------------------------------------------

// BindPhoneNumberRequest

// string phoneNumber = 1;
inline void BindPhoneNumberRequest::clear_phonenumber() {
  phonenumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BindPhoneNumberRequest::phonenumber() const {
  // @@protoc_insertion_point(field_get:user.BindPhoneNumberRequest.phoneNumber)
  return _internal_phonenumber();
}
inline void BindPhoneNumberRequest::set_phonenumber(const std::string& value) {
  _internal_set_phonenumber(value);
  // @@protoc_insertion_point(field_set:user.BindPhoneNumberRequest.phoneNumber)
}
inline std::string* BindPhoneNumberRequest::mutable_phonenumber() {
  // @@protoc_insertion_point(field_mutable:user.BindPhoneNumberRequest.phoneNumber)
  return _internal_mutable_phonenumber();
}
inline const std::string& BindPhoneNumberRequest::_internal_phonenumber() const {
  return phonenumber_.Get();
}
inline void BindPhoneNumberRequest::_internal_set_phonenumber(const std::string& value) {
  
  phonenumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BindPhoneNumberRequest::set_phonenumber(std::string&& value) {
  
  phonenumber_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.BindPhoneNumberRequest.phoneNumber)
}
inline void BindPhoneNumberRequest::set_phonenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phonenumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.BindPhoneNumberRequest.phoneNumber)
}
inline void BindPhoneNumberRequest::set_phonenumber(const char* value,
    size_t size) {
  
  phonenumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.BindPhoneNumberRequest.phoneNumber)
}
inline std::string* BindPhoneNumberRequest::_internal_mutable_phonenumber() {
  
  return phonenumber_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BindPhoneNumberRequest::release_phonenumber() {
  // @@protoc_insertion_point(field_release:user.BindPhoneNumberRequest.phoneNumber)
  return phonenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BindPhoneNumberRequest::set_allocated_phonenumber(std::string* phonenumber) {
  if (phonenumber != nullptr) {
    
  } else {
    
  }
  phonenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phonenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.BindPhoneNumberRequest.phoneNumber)
}

// -------------------------------------------------------------------

// RechargeRequest

// string rechargeId = 1;
inline void RechargeRequest::clear_rechargeid() {
  rechargeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RechargeRequest::rechargeid() const {
  // @@protoc_insertion_point(field_get:user.RechargeRequest.rechargeId)
  return _internal_rechargeid();
}
inline void RechargeRequest::set_rechargeid(const std::string& value) {
  _internal_set_rechargeid(value);
  // @@protoc_insertion_point(field_set:user.RechargeRequest.rechargeId)
}
inline std::string* RechargeRequest::mutable_rechargeid() {
  // @@protoc_insertion_point(field_mutable:user.RechargeRequest.rechargeId)
  return _internal_mutable_rechargeid();
}
inline const std::string& RechargeRequest::_internal_rechargeid() const {
  return rechargeid_.Get();
}
inline void RechargeRequest::_internal_set_rechargeid(const std::string& value) {
  
  rechargeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RechargeRequest::set_rechargeid(std::string&& value) {
  
  rechargeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:user.RechargeRequest.rechargeId)
}
inline void RechargeRequest::set_rechargeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rechargeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:user.RechargeRequest.rechargeId)
}
inline void RechargeRequest::set_rechargeid(const char* value,
    size_t size) {
  
  rechargeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:user.RechargeRequest.rechargeId)
}
inline std::string* RechargeRequest::_internal_mutable_rechargeid() {
  
  return rechargeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RechargeRequest::release_rechargeid() {
  // @@protoc_insertion_point(field_release:user.RechargeRequest.rechargeId)
  return rechargeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RechargeRequest::set_allocated_rechargeid(std::string* rechargeid) {
  if (rechargeid != nullptr) {
    
  } else {
    
  }
  rechargeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rechargeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:user.RechargeRequest.rechargeId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::user::GoingDownReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user::GoingDownReason>() {
  return ::user::GoingDownReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
